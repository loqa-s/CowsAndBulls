`use strict`;

const input = document.querySelector(`.input--guess`);
const addingDiv = document.getElementById(`result--main`);
const modal = document.querySelector(`.modal`);
const overlay = document.querySelector(`.overlay`);
const resultActualEl = document.querySelector(`.result--actual`);
const attemptValue = document.querySelector(`.attempt--guessValue`);
const highScoreValue = document.querySelector(`.highscore--guessValue`);
const btnGuess = document.querySelector(`.btn--guess`);
const btnCloseModal = document.querySelector(`.close-modal`);
const btnOpenModal = document.querySelector(`.btn--rules`);
const btnNew = document.querySelector(`.btn--newGame`);

const message = function (text) {
  document.querySelector(`.h--guess`).textContent = text;
};

const openModal = function () {
  modal.classList.remove(`hidden`);
  overlay.classList.remove(`hidden`);
  modalState = true;
};
const closeModal = function () {
  modal.classList.add(`hidden`);
  overlay.classList.add(`hidden`);
  modalState = false;
};

const modalWindow = function () {
  btnOpenModal.addEventListener("click", openModal);
  btnCloseModal.addEventListener("click", closeModal);
  overlay.addEventListener("click", closeModal);
  document.addEventListener("keydown", function (e) {
    if (e.key === "Escape" && !modal.classList.contains(`hidden`)) {
      closeModal();
    }
  });
};

const newGame = function () {
  secretNumber = [];
  attempt = 0;
  generateArray(secretNumber);
  message(`–ù–∞—á–Ω–µ–º?`);
  resultActualEl.textContent = ``;
  input.value = ``;
  input.focus()
  attemptValue.textContent = attempt;
  btnGuess.classList.remove(`disabled`);
  winningState = false;

  while (hasDuplicates(secretNumber)) {
    //–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–≥–æ –∑–∞–Ω–æ–≤–æ
    secretNumber = [];
    generateArray(secretNumber);
  }
};

const addNew = function (text) {
  // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
  const newDiv = document.createElement(`div`);
  const newText = document.createTextNode(text);
  addingDiv.appendChild(newDiv);
  newDiv.appendChild(newText);
};

const compareValues = function (a, b) {
  // —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤–µ
  return a.toString() === b.toString();
};

const hasDuplicates = function (array) {
  // —Ñ—É–Ω–∫—Ü–∏—è –∏—â–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã
  return new Set(array).size !== array.length;
};

const generateArray = function (array) {
  //—Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ä—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–µ 4 —á–∏—Å–ª–∞ –∏ –ø—É—à–∏—Ç –∏—Ö –≤ –º–∞—Å—Å–∏–≤
  let generateValue;
  for (i = 0; i < 4; i++) {
    generateValue = Math.trunc(Math.random() * 9) + 1;
    array.push(generateValue);
  }
};

const actualGame = function () {
  const inputRawValue = input.value;
  const inputStringValue = inputRawValue.split("");
  const inputValue = inputStringValue.map(Number);

  if (inputValue.length !== 4) {
    //–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ–µ —á–∏—Å–ª–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 4—Ö –∑–Ω–∞–∫–æ–≤
    return message(`–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 4 —Ü–∏—Ñ—Ä—ã`);
  }

  if (hasDuplicates(inputValue)) {
    //–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –≤–≤–µ–¥–µ–Ω–Ω–æ–º —á–∏–ª—Å–ª–µ –Ω–µ—Ç –¥—É–±–ª–µ–π
    return message(`–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è`);
  }

  if (compareValues(secretNumber, inputValue)) {
    //–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–±–µ–¥–Ω—ã–º
    addNew(`‚ú® ${inputRawValue} ‚Äî –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ! ‚ú®`);
    btnGuess.classList.add(`disabled`);
    winningState = true;
    if (attempt < highScore || highScore === 0) {
      highScore = attempt;
      highScoreValue.textContent = highScore;
    }
    return message(`‚ú® –ü–û–ë–ï–î–ê ‚ú®`);
  }

  message(`ü§îü§îü§î`);

  attempt++;
  attemptValue.textContent = attempt;

  let cow = 0;
  let bull = 0;

  for (let i = 0; i < secretNumber.length; i++) {
    for (let j = 0; j < inputValue.length; j++) {
      if (secretNumber[i] === inputValue[j]) {
        if (secretNumber[i] === inputValue[i]) {
          bull++;
        } else {
          cow++;
        }
      }
    }
  }

  addNew(`${inputRawValue}  ‚Äî  ${bull} üêÇ ${cow} üêÑ`);
};

let secretNumber;
let attempt;
let highScore = 0;
let winningState = false;
let modalState = false;

newGame();
modalWindow();

// console.log(secretNumber);

btnNew.addEventListener(`click`, function () {
  newGame();
});

btnGuess.addEventListener(`click`, function () {
  actualGame();
  input.value = ``
  input.focus()
});

document.addEventListener("keyup", function (e) {
  if (e.key === "Enter" && !winningState) {
    actualGame();
    input.value = ``
    input.focus()
  }
});

document.addEventListener("keydown", function (e) {
  if (e.key === "Escape" && !modalState) {
    input.value = ``;
  }
})

console.log(modal.classList.contains(`hidden`))

// –ë–ê–ì: –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–≤–∞–µ—Ç 0-—è
